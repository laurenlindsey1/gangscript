realHotGirlScript {
  Program     =  Stmt*
  Stmt        =  SimpleStmt "!!!"                                        -- simple
              |  "ATTENTIONATTENTIONüó£" id "(" Params ")" Block          -- class
              |  "sheWaitsüò©"? "weOutHereTryinToFunction" (Type | "leftOnRead")
                 id "(" Params ")" Block                                 -- function
              |  "wylinü§™" Exp Block                                     -- while
              |  "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è" Exp Block
                 ("becauseWhyyyüòº" Exp Block)*
                 ("BECAUSEIMONFUCKINGVACATIONüëÖ" Block)?                 -- if
              |  "shutUpGirlfriendüòà" id "$" Case+ DefaultCase? "#"      -- switch
              |  "openHerUpüçë" (NumType | LongType)
              	    id ":" Exp "üî•" 
                    id relop Exp "üî•"
                    id incremop
                    Block                                                -- forloop1
              |  "openHerUpüçë" 
                 "[" Exp spread Exp "]" Block                            -- forloop2
  SimpleStmt  =  ConstType? Type DeclIds ":" Exps  						 -- varDecl
              |  VarExps ":" Exps                                        -- assign
              |  Call                                                    -- call
              |  ObjectDec                                               -- newObject
              |  Print                                                   -- print
              |  "GTFOüí©"                                    	         -- break
              |  "keepItPushin"                                          -- continue
              |  "andThemsTheFacts" Exp?                                 -- return
              |  Exp
  Block       =  "$" Stmt* "#"                      					 -- block
  Print 	  =  "supLilBitch" Exp                      
  Case        =  "andWhatAboutItüëâ" Exp Block                            -- switchCase
  DefaultCase =  "andLetMeDoMeü§ë" Block                                  -- switchDefault
  ObjectDec   =  id id ":" "newBootzBeeeatch‚ú®" id "(" Params ")" "!!!"  -- objectDeclaration
  Exp         =  Exp "||" Exp1                                           -- or
              |  Exp "&&" Exp1                                           -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                                         -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                                         -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                                         -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                                           -- unary
              |  Exp5
  Exp5        =  Exp6 postfixop                                          -- optionals
  			  |  Exp6
  Exp6        =  Exp7 incremop                                           -- increment
              |  Exp7
  Exp7        =  Exp8 "^" Exp8                                           -- exponentiation
              |  Exp8
  Exp8        =  "seeYa" id ":" ((Exp"!!!")+) "wouldntWannBeYa"          -- closure
              |  Exp9
  Exp9        =  boollit
              |  numlit
              |  strlit
              |  nonelit
              |  ArrayType"[" ListOf<Exp, ","> "]"                       -- arrays
              |  SetType "$" ListOf<Exp, ","> "#"                        -- set
              |  DictType"$" ListOf<KeyValue, ","> "#"                   -- dict
              |  TupleType"(" ListOf<Exp, ","> ")"                       -- tuple
              |  Call                                                    
              |  VarExp
              |  "(" Exp ")"                                             -- parens
  KeyValue    =  id "=" Exp
  Call        =  "hotlineBlingüíé"? id "(" Args ")"                       -- call
  Exps        =  NonemptyListOf<Exp, ",">                                -- exps
  DeclId      =  id                                                      -- declId
  DeclIds     =  NonemptyListOf<DeclId, ",">                             -- declIds
  VarExp      =  VarExp "[" Exp "]"                                      -- subscripted1
              |  VarExp "."  id                                          -- subscripted2
              |  id
  VarExps     =  NonemptyListOf<VarExp, ",">                             -- varExps
  Param       =  Type id (":" Exp)?										 -- param
  Params      =  ListOf<Param, ",">                                      -- params
  Arg         =  Type id ":" Exp                                         -- arg
  Args        =  ListOf<Arg, ",">                                        -- args
  Type        =  NumType 
  			  | LongType
              | StringType 
              | BooleanType 
              | ArrayType 
              | SetType 
              | DictType 
              | TupleType                                                -- type
  NumType     =  "digitz"								                 -- numKeyword
  LongType    =  "longz"                                                 -- longKeyWord
  StringType  =  "wordz"   												 -- stringKeyword
  BooleanType =  "boolz"                                                 -- boolKeyword
  ArrayType   =  "arrayz"                                                -- arrayKeyword
  SetType     =  "setz" "$"Type"#"                                       -- setKeyword
  DictType    =  "dictz"                                                 -- dictKeyword
  TupleType   =  "tuplez" "(" Type ")"                                   -- tupleKeyword
  ConstType   =  "stayz"                                                 -- constKeyword
  keyword     =  ("ATTENTIONATTENTIONüó£" 
  			  | "$" 
              | "#"
              | ":"
              | "keepItPushin"
              | "^"
              | "("
              | ")"
              | "["
              | "]"
              | "+"
              | "\""
              | "\\"
              | "\n"
              | "++"
              | "--"
              | "spreadThatThangüçØ" 
              | "="
              | "."
              | ","
              | "<=" 
              | "<" 
              | "==" 
              | "!="
              | ">=" 
              | ">"
              | "*" 
              | "//" 
              | "/" 
              | "%"
              | "oop"
              | ":/"
              | "/:"
              | "-" 
              | "BANGENERGY"
              | "wylinü§™" 
              | "yeet" 
              | "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è"
              | "&&" 
              | "becauseWhyyyüòº" 
              | "BECAUSEIMONFUCKINGVACATIONüëÖ" 
              | "shutUpGirlfriendüòà" 
              | "leftOnRead"
              | "openHerUp" 
              | "üî•"  
              | " " 
              | "\t"
              | "openHerUpüçë" 
              | "sheWaitsüò©" 
              | "andWhatAboutItüëâ" 
              | "||" 
              | "suplilBitch" 
              | "andLetMeDoMeü§ë" 
              | "newBootzBeeeatch‚ú®" 
              | "hotlineBlingüíé" 
              | "digitz" 
              | "longz" 
              | "wordz" 
              | "boolz" 
              | "trueShit" 
              | "stayz" 
              | "arrayz" 
              | "setz" 
              | "dictz" 
              | "tuplez" 
              | "deceasedOnYouHoes" 
              | "fraudulentAssBitch" 
              | "seeYa" 
              | "wouldntWannBeYa" 
              | "!!!" 
              | "weOutHereTryinToFunction" 
              | "?" 
              | "andThemsTheFacts" 
              | "GTFOüí©") ~idrest                                         -- keyword 
  id          =  ~keyword ("_" | letter+) idrest*                         -- id
  idrest      =  "_" | alnum				                              -- idrest
  numlit      =  digit+ ("." digit+)? (("+" | "-")? digit+)?              -- numlit
  boollit     =  "trueShit" | "fraudulentAssBitch"                        -- boolit
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""              -- strlit
  nonelit     = "deceasedOnYouHoes"                                       -- nonelit
  escape      =  "\\" ("\\" | "\"" | "n")                                 -- simple
  incremop 	  =  "++" | "--"                                              -- incremop
  spread      =  "spreadThatThangüçØ"                                      -- spread
  addop       =  "+" | "-"                                                -- addop
  relop       =  "<=" | "<" | "==" | "!="| ">=" | ">"                     -- relop
  mulop       =  "*" | "//" | "/" | "%"                                   -- mulop
  prefixop    =  "-" | "BANGENERGY"                                       -- prefixop
  postfixop   =  "?"                                                      -- postfixop
  space       +=  " " | "\t" | comment                                    -- space
  comment     =  "oop" (~"\n" any)*                                       -- singleline
              |  ":/" (~"/:" any)* "/:"                                   -- multiline
}