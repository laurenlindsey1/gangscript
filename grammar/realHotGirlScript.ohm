realHotGirlScript {
  Program     =  Stmt*
  Stmt        =  SimpleStmt "!!!"                                        -- simple
              |  "ATTENTIONATTENTIONüó£" id "(" Params ")" Block          -- class
              |  "sheWaitsüò©"? "weOutHereTryinToFunction" (Type | "leftOnRead")
                 id "(" Params ")" Block                                 -- function
              |  "wylinü§™" Exp Block                                     -- while
              |  "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è" Exp Block
                 ("becauseWhyyyüòº" Exp Block)*
                 ("BECAUSEIMONFUCKINGVACATIONüëÖ" Block)?                 -- if
              |  "shutUpGirlfriendüòà" id "$" Case+ DefaultCase? "#"      -- switch
              |  "openHerUpüçë" (NumType | LongType)
              	    id ":" Exp "üî•" 
                    id relop Exp "üî•"
                    id incremop
                    Block                                                -- forloop1
              |  "openHerUpüçë" 
                 "[" Exp spread Exp "]" Block                            -- forloop2
  SimpleStmt  =  ConstType? Type DeclIds ":" Exps  						    -- varDecl
              |  VarExps ":" Exps                                        -- assign
              |  Call                                                    -- call
              |  Print                                                   -- print
              |  "GTFOüí©"                                    	          -- break
              |  "keepItPushin"                                          -- continue
              |  "andThemsTheFacts" Exp?                                 -- return
              |  Exp
  Block       =  "$" Stmt* "#"                      					       -- block
  Print 	     =  "supLilBitch" Exp                      
  Case        =  "andWhatAboutItüëâ" Exp Block                            -- switchCase
  DefaultCase =  "andLetMeDoMeü§ë" Block                                  -- switchDefault
  Exp         =  Exp "||" Exp1                                           -- or
              |  Exp "&&" Exp1                                           -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                                         -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                                         -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                                         -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                                           -- unary
              |  Exp5
  Exp5        =  Exp6 postfixop                                          -- optionals
  			     |  Exp6
  Exp6        =  Exp7 incremop                                           -- increment
              |  Exp7
  Exp7        =  Exp8 "^" Exp8                                           -- exponentiation
              |  Exp8
  Exp8        =  "seeYa" id ":" ((Exp"@")+) "wouldntWannBeYa"            -- closure
              |  Exp9
  Exp9        =  boollit
              |  numlit
              |  strlit
              |  nonelit
              |  "[" ListOf<Exp, ","> "]"                                -- arrays
              |  "$" ListOf<Exp, ","> "#"                                -- set
              |  "$" ListOf<KeyValue, ","> "#"                           -- dict
              |  "(" ListOf<Exp, ","> ")"                                -- tuple
              |  Call                                                    
              |  VarExp
              |  "(" Exp ")"                                             -- parens
              ///FIX KEYVALUE PAIRS!!!!!
  KeyValue    =  Exp "~" Exp
  Call        =  "hotlineBlingüíé"? id "(" Args ")"                       -- call
  Exps        =  NonemptyListOf<Exp, ",">                                -- exps
  DeclId      =  id                                                      -- declId
  DeclIds     =  NonemptyListOf<DeclId, ",">                             -- declIds
  VarExp      =  VarExp "[" Exp "]"                                      -- subscripted1
              |  VarExp "." "("id")"                                     -- subscripted2
              |  VarExp "." id                                           -- subscripted3
              |  id
  VarExps     =  NonemptyListOf<VarExp, ",">                             -- varExps
  Param       =  Type id (":" Exp)?										          -- param
  Params      =  ListOf<Param, ",">                                      -- params
  Arg         =  Type id ":" Exp                                         -- arg
  Args        =  ListOf<Arg, ",">                                        -- args
   Type        =  NumType 
  			     | LongType
              | StringType 
              | BooleanType 
              | ArrayType 
              | SetType 
              | DictType 
              | TupleType  
              | Type postfixop?												--optional
              | id -- type
  NumType     =  "digitz" postfixop?								             -- numKeyword
  LongType    =  "longz"  postfixop?                                     -- longKeyWord
  StringType  =  "wordz"  postfixop? 												 -- stringKeyword
  BooleanType =  "boolz"  postfixop?                                     -- boolKeyword
  ArrayType   =  "arrayz" "<"Type">" postfixop?                          -- arrayKeyword
  SetType     =  "setz" "<"Type">" postfixop?                            -- setKeyword
  DictType    =  "dictz"  "<" Type "," Type ">" postfixop?                                               -- dictKeyword
  TupleType   =  "tuplez" "<" Type(("," Type)*) ">" postfixop?           -- tupleKeyword
  ConstType   =  "stayz"                                                 -- constKeyword
  keyword     =  ("ATTENTIONATTENTIONüó£" 
              | "keepItPushin"
              | "spreadThatThangüçØ" 
              | "oop"
              | "BANGENERGY"
              | "wylinü§™" 
              | "yeet" 
              | "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è"
              | "becauseWhyyyüòº" 
              | "BECAUSEIMONFUCKINGVACATIONüëÖ" 
              | "shutUpGirlfriendüòà" 
              | "leftOnRead"
              | "openHerUp" 
              | "openHerUpüçë" 
              | "sheWaitsüò©" 
              | "andWhatAboutItüëâ" 
              | "suplilBitch" 
              | "andLetMeDoMeü§ë" 
              | "newBootzBeeeatch‚ú®" 
              | "hotlineBlingüíé" 
              | "digitz" 
              | "longz" 
              | "wordz" 
              | "boolz" 
              | "trueShit" 
              | "stayz" 
              | "arrayz" 
              | "setz" 
              | "dictz" 
              | "tuplez" 
              | "deceasedOnYouHoes" 
              | "fraudulentAssBitch" 
              | "seeYa" 
              | "wouldntWannBeYa" 
              | "weOutHereTryinToFunction" 
              | "andThemsTheFacts" 
              | "GTFOüí©") ~idrest                                         -- keyword 
  id          =  ~keyword ("_" | letter+) idrest*                         -- id
  idrest      =  "_" | alnum				                                   -- idrest
  numlit      =  (("+" | "-")?) digit+ frac? eExpo?                       -- numlit 
  frac        =  "." digit*   -- fraction                                        
  eExpo       =  (caseInsensitive<"e">) ("+" | "-")? digit+               -- eExpo                                           
  boollit     =  "trueShit" | "fraudulentAssBitch"                        -- boolit
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""              -- strlit
  nonelit     = "deceasedOnYouHoes"                                       -- nonelit
  escape      =  "\\" ("\\" | "\"" | "n")                                 -- simple
  incremop 	  =  "++" | "--"                                              -- incremop
  spread      =  "spreadThatThangüçØ"                                      -- spread
  addop       =  "+" | "-"                                                -- addop
  relop       =  "<=" | "<" | "==" | "!="| ">=" | ">"                     -- relop
  mulop       =  "*" | "//" | "/" | "%"                                   -- mulop
  prefixop    =  "-" | "BANGENERGY" | "+"                                 -- prefixop
  postfixop   =  "?"                                                      -- postfixop
  space       +=  " " | "\t" | comment                                    -- space
  comment     =  "oop" (~"\n" any)*                                       -- singleline
              |  ":/" (~"/:" any)* "/:"                                   -- multiline
}