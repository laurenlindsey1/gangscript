realHotGirlScript {
  Program     =  Stmt*
  Stmt        =  SimpleStmt "!!!"                           -- simple
              |  class id "(" Params ")" Block              -- class
              |  async? funcDecl (Type | void)
                 id "(" Params ")" Block                    -- function
              |  while Exp Block                            -- while
              |  if Exp Block (elseif Exp Block)*
                 (else Block)?                              -- if
              |  switch Exp "$" Case+ DefaultCase? "#"      -- switch
              |  for (intType | longType)  id ":"
                 Exp "üî•" Exp "üî•" id incremop Block        -- forloop1
              |  for "[" numlit spread
                   numlit "]" Block           -- forloop2
  SimpleStmt  =  const? Type DeclIds ":" Exps               -- varDecl
              |  VarExps ":" Exps                           -- assign
              |  Call                                       -- call
              |  Print                                      -- print
              |  break                                      -- break
              |  continue                                   -- continue
              |  return Exp?                                -- return
              |  Exp
  Block       =  "$" Stmt* "#"
  Print 	     =  print Exp
  Case        =  case Exp Block
  DefaultCase =  default Block
  Exp         =  Exp "||" Exp1                              -- or
              |  Exp "&&" Exp1                              -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                            -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                            -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                            -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                              -- unary
              |  Exp5
  Exp5        =  Exp6 postfixop                             -- optional
  			     |  Exp6
  Exp6        =  Exp7 incremop                              -- increment
              |  Exp7
  Exp7        =  Exp8 "^" Exp8                              -- exponentiation
              |  Exp8
  Exp8        =  let id ":" (Exp"@")+ endKey                -- closure
              |  Exp9
  Exp9        =  boollit
              |  numlit
              |  strlit
              |  nonelit
              |  "(" Exp ")"                                -- parens
              |  "[" ListOf<Exp, ","> "]"                   -- arrays
              |  "$" ListOf<Exp, ","> "#"                   -- set
              |  "$" ListOf<KeyValue, ","> "#"              -- dict
              |  "(" ListOf<Exp, ","> ")"                   -- tuple
              |  Call
              |  VarExp
  KeyValue    =  Exp "~" Exp
  Call        =  await? id "(" Args ")"
  Exps        =  NonemptyListOf<Exp, ",">
  DeclId      =  id
  DeclIds     =  NonemptyListOf<DeclId, ",">
  VarExp      =  VarExp "[" Exp "]"                         -- subscripted
              |  VarExp "." id                              -- member
              |  id                                         -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  Type id (":" Exp)?
  Params      =  ListOf<Param, ",">
  Arg         =  id ":" Exp
  Args        =  ListOf<Arg, ",">
  Type        =  Type postfixop                             -- optional
              |  intType
  			     |  longType
              |  stringType
              |  booleanType
              |  ArrayType
              |  SetType
              |  DictType
              |  TupleType
              |  id                                         -- id
  intType     =  "digitz"
  longType    =  "longz"
  stringType  =  "wordz"
  booleanType =  "boolz"
  ArrayType   =  arrayDecl "<"Type">"
  SetType     =  setDecl "<"Type">"
  DictType    =  dictDecl "<" Type "," Type ">"
  TupleType   =  tupleDecl "<" Type ("," Type)* ">"
  const       =  "stayz"
  class       =  "ATTENTIONATTENTIONüó£" ~alnum
  continue    =  "keepItPushin" ~alnum
  spread      =  "spreadThatThangüçØ" ~alnum
  singleLnCmt =  "oop" ~alnum
  negate      =  "BANGENERGY" ~alnum
  while       =  "wylinü§™"  ~alnum
  if          =  "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è" ~alnum
  elseif      =  "becauseWhyyyüòº" ~alnum
  else        =  "BECAUSEIMONFUCKINGVACATIONüëÖ" ~alnum
  switch      =  "shutUpGirlfriendüòà" ~alnum
  void        =  "leftOnRead" ~alnum
  for         =  "openHerUpüçë" ~alnum
  async       =  "sheWaitsüò©" ~alnum
  case        =  "andWhatAboutItüëâ" ~alnum
  print       =  "supLilBitch" ~alnum
  default     =  "andLetMeDoMeü§ë" ~alnum
  await       =  "hotlineBlingüíé" ~alnum
  true        =  "trueShit" ~alnum
  arrayDecl   =  "arrayz" ~alnum
  setDecl     =  "setz" ~alnum
  dictDecl    =  "dictz" ~alnum
  tupleDecl   =  "tuplez" ~alnum
  false       =  "fraudulentAssBitch" ~alnum
  let         =  "seeYa" ~alnum
  endKey      =  "wouldntWannBeYa" ~alnum
  funcDecl    =  "weOutHereTryinToFunction" ~alnum
  return      =  "andThemsTheFacts" ~alnum
  break       =  "GTFOüí©" ~alnum
  keyword     =  (intType
              |  longType
              |  stringType
              |  booleanType
              |  arrayDecl
              |  const
              |  class
              |  continue
              |  spread
              |  singleLnCmt
              |  negate
              |  while
              |  if
              |  elseif
              |  else
              |  switch
              |  void
              |  for
              |  async
              |  case
              |  print
              |  default
              |  await
              |  true
              |  arrayDecl
              |  setDecl
              |  dictDecl
              |  tupleDecl
              |  nonelit
              |  false
              |  let
              |  endKey
              |  funcDecl
              |  return
              |  break) ~idrest
  id          =  ~keyword ("_" | letter+) idrest*
  idrest      =  "_" | alnum
  numlit      =  (("+" | "-")?) digit+ frac? eExpo?
  frac        =  "." digit*
  eExpo       =  (caseInsensitive<"e">) ("+" | "-")?
                 digit+
  boollit     =  true | false
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)*
                 "\""
  nonelit     =  "deceasedOnYouHoes"  ~alnum
  escape      =  "\\" ("\\" | "\"" | "n")                      -- simple
  incremop 	  =  "++" | "--"
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!="| ">=" | ">"
  mulop       =  "*" | "//" | "/" | "%"
  prefixop    =  "-" | negate | "+"
  postfixop   =  "?"
  space      +=  " " | "\t" | comment
  comment     =  singleLnCmt (~"\n" any)*                      -- singleline
              |  ":/" (~"/:" any)* "/:"                        -- multiline
}
