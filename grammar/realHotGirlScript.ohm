realHotGirlScript {
  Program     =  Stmt*
  Stmt        =  SimpleStmt "!!!"                                        -- simple
              |  class id "(" Params ")" Block          -- class
              |  async? funcDecl (Type | void) id "(" Params ")" Block                                 -- function
              |  while Exp Block                                     -- while
              |  if Exp Block (elseif Exp Block)* (else Block)?                 -- if
              |  switch id "$" Case+ DefaultCase? "#"      -- switch
              |  for (numType | longType)  id ":" Exp "üî•" id relop Exp "üî•"id incremop Block -- forloop1
              |  for "[" Exp spread Exp "]" Block                            -- forloop2
  SimpleStmt  =  constType? Type DeclIds ":" Exps  						    -- varDecl
              |  VarExps ":" Exps                                        -- assign
              |  Call                                                    -- call
              |  Print                                                   -- print
              |  break                                    	          -- break
              |  continue                                          -- continue
              |  return Exp?                                 -- return
              |  Exp
  Block       =  "$" Stmt* "#"                      					       -- block
  Print 	     =  print Exp                      
  Case        =  case Exp Block                            -- switchCase
  DefaultCase =  default Block                                  -- switchDefault
  Exp         =  Exp "||" Exp1                                           -- or
              |  Exp "&&" Exp1                                           -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                                         -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                                         -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                                         -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                                           -- unary
              |  Exp5
  Exp5        =  Exp6 postfixop                                          -- optionals
  			     |  Exp6
  Exp6        =  Exp7 incremop                                           -- increment
              |  Exp7
  Exp7        =  Exp8 "^" Exp8                                           -- exponentiation
              |  Exp8
  Exp8        =  let id ":" ((Exp"@")+) endKey            -- closure
              |  Exp9
  Exp9        =  boollit
              |  numlit
              |  strlit
              |  nonelit
              |  "[" ListOf<Exp, ","> "]"                                -- arrays
              |  "$" ListOf<Exp, ","> "#"                                -- set
              |  "$" ListOf<KeyValue, ","> "#"                           -- dict
              |  "(" ListOf<Exp, ","> ")"                                -- tuple
              |  Call                                                    
              |  VarExp
              |  "(" Exp ")"                                             -- parens
  KeyValue    =  Exp "~" Exp
  Call        =  await? id "(" Args ")"                       -- call
  Exps        =  NonemptyListOf<Exp, ",">                                -- exps
  DeclId      =  id                                                      -- declId
  DeclIds     =  NonemptyListOf<DeclId, ",">                             -- declIds
  VarExp      =  VarExp "[" Exp "]"                                      -- subscripted
              |  VarExp "." "("id")"                                     -- member
              |  VarExp "." id                                           -- subscripted3
              |  id
  VarExps     =  NonemptyListOf<VarExp, ",">                             -- varExps
  Param       =  Type id (":" Exp)?										          -- param
  Params      =  ListOf<Param, ",">                                      -- params
  Arg         =  Type id ":" Exp                                         -- arg
  Args        =  ListOf<Arg, ",">                                        -- args
  Type        =  numType 
  			     | longType
              | stringType 
              | booleanType 
              | arrayType 
              | setType 
              | dictType 
              | tupleType  
              | Type postfixop?												--optional
              | id -- type
  numType     =  "digitz"								                         -- numKeyword
  longType    =  "longz"                                     -- longKeyWord
  stringType  =  "wordz" 											 -- stringKeyword
  booleanType =  "boolz"                                     -- boolKeyword
  arrayType   =  arrayDecl "<"Type">"                      -- arrayKeyword
  setType     =  setDecl "<"Type">"                             -- setKeyword
  dictType    =  dictDecl  "<" Type "," Type ">"                                              -- dictKeyword
  tupleType   =  tupleDecl "<" Type(("," Type)*) ">"           -- tupleKeyword
  constType   =  "stayz"                                                 -- constKeyword
  class       = "ATTENTIONATTENTIONüó£" ~alnum
  continue    = "keepItPushin" ~alnum
  spread      = "spreadThatThangüçØ" ~alnum
  singleLnCmt = "oop" ~alnum
  negate      = "BANGENERGY" ~alnum
  while       = "wylinü§™"  ~alnum
  if          = "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è" ~alnum
  elseif      = "becauseWhyyyüòº" ~alnum
  else        = "BECAUSEIMONFUCKINGVACATIONüëÖ" ~alnum
  switch      = "shutUpGirlfriendüòà" ~alnum
  void        = "leftOnRead" ~alnum
  for         =  "openHerUpüçë" ~alnum
  async       = "sheWaitsüò©" ~alnum
  case        = "andWhatAboutItüëâ" ~alnum
  print       = "suplilBitch" ~alnum
  default     = "andLetMeDoMeü§ë" ~alnum
  await       = "hotlineBlingüíé" ~alnum
  true        = "trueShit" ~alnum
  arrayDecl   = "arrayz" ~alnum
  setDecl     = "setz" ~alnum
  dictDecl    = "dictz" ~alnum
  tupleDecl   = "tuplez" ~alnum
  false       = "fraudulentAssBitch" ~alnum
  let         = "seeYa" ~alnum
  endKey      = "wouldntWannBeYa" ~alnum
  funcDecl    = "weOutHereTryinToFunction" ~alnum
  return      = "andThemsTheFacts" ~alnum
  break       = "GTFOüí©" ~alnum
  keyword     = (numType
              | longType
              | stringType
              | booleanType
              | arrayType
              | constType
              | class
              | continue
              | spread
              | singleLnCmt
              | negate
              | while
              | if
              | elseif
              | else
              | switch
              | void
              | for
              | async 
              | case
              | print
              | default
              | await 
              | true
              | arrayDecl
              | setDecl
              | dictDecl
              | tupleDecl
              | nonelit
              | false 
              | let
              | endKey
              | funcDecl
              | return
              | break
              | keyword) ~idrest                                         -- keyword 
  id          =  ~keyword ("_" | letter+) idrest*                         -- id
  idrest      =  "_" | alnum				                                   -- idrest
  numlit      =  (("+" | "-")?) digit+ frac? eExpo?                       -- numlit 
  frac        =  "." digit*   -- fraction                                        
  eExpo       =  (caseInsensitive<"e">) ("+" | "-")? digit+               -- eExpo                                           
  boollit     =  true | false                        -- boolit
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""              -- strlit
  nonelit     = "deceasedOnYouHoes"  ~alnum                                    -- nonelit
  escape      =  "\\" ("\\" | "\"" | "n")                                 -- simple
  incremop 	  =  "++" | "--"                                              -- incremop
  addop       =  "+" | "-"                                                -- addop
  relop       =  "<=" | "<" | "==" | "!="| ">=" | ">"                     -- relop
  mulop       =  "*" | "//" | "/" | "%"                                   -- mulop
  prefixop    =  "-" | negate | "+"                                 -- prefixop
  postfixop   =  "?"                                                      -- postfixop
  space       +=  " " | "\t" | comment                                    -- space
  comment     =  singleLnCmt (~"\n" any)*                                       -- singleline
              |  ":/" (~"/:" any)* "/:"                                   -- multiline
}