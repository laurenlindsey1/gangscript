realHotGirlScript {
  Program     =  Stmt+ | FunctionStmt* | ClassesStmt*
  ClassesStmt  = "ATTENTIONATTENTION üó£" id "(" Params ")" ClassBlock    -- class
  FunctionStmt = "sheWaitsüò©"? "weOutHereTryinToFunction"(Type | "void")
                 id "(" Params ")" Block                                 -- function
  Stmt        =  SimpleStmt "!!!"                                        -- simple
              |  "wylinü§™" Exp Block                                     -- while
              |  "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è" Exp Block
                 ("becauseWhyyyüòº" Exp Block)*
                 ("BECAUSEIMONFUCKINGVACATIONüëÖ" Block)?                 -- if
              |  "shutUpGirlfriendüòà"  Case+ DefaultCase?                -- switch
              |  "openHerUpüçë"((NumType | LongType)
              	  id ":" numlit "üî•" 
                 id relop Exp "üî•"
                 id incremop) Block                                      -- forloop1
              |  "openHerUpüçë" id 
                 "["Exp spread Exp "]" Block                             -- forloop2
  SimpleStmt  =  Type DeclIds ":" Exps                                   -- vardecl
              |  VarExps ":" Exps                                        -- assign
              |  Call                                                    -- call
              |  ObjectDec                                               -- newObject
              |  Print                                                   -- print
              |  "GTFOüí©"                                    	         -- break
              |  "andThemsTheFacts" Exp?                                 -- return
              |  Exp
  ClassBlock  =  "$" FunctionStmt "#"
  Block       =  "$"  Stmt* "#"                      
  Print 	  =  "supLilBitch" Exp                      
  Case        =  "andWhatAboutIt" Exp "üëâ" Block
  DefaultCase =  "andLetMeDoMeü§ë" Block
  ObjectDec   =  "newBootzBeeeatch‚ú®" "(" Params ")" Block
  Exp         =  Exp "||" Exp1                                     -- or
              |  Exp "&&" Exp1                                     -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                                   -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                                   -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                                   -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                                     -- unary
              |  Exp5
  Exp5        =  Exp6 postfixop                                    -- optionals
  			  |  Exp6
  Exp6        =  Exp7 incremop                                     -- increment
              |  Exp7
  Exp7        =  Exp8 "^" Exp8                                     -- exponentiation
              |  Exp8
  Exp8        =  "seeYa" id ":" ((Exp9"!!!")+) "wouldntWannBeYa"   --closure
              |  Exp9
  Exp9        =  boollit
              |  numlit
              |  strlit
              |  nonelit
              |  ArrayType"[" ListOf<Exp, ","> "]"                 -- arrays
              |  SetType "$" ListOf<Exp, ","> "#"                  -- set
              |  DictType"$" ListOf<KeyValue, ","> "#"             -- dict
              |  TupleType"(" ListOf<Exp, ","> ")"                 -- tuple
              |  Call                                              -- call
              |  VarExp
              |  "(" Exp ")"                                       -- parens
  KeyValue    =  id "=" Exp
  Call        =  "hotlineBlingüíé"? VarExp "(" Args ")"
  Exps        =  NonemptyListOf<Exp, ",">
  DeclId      =  id 
  DeclIds     =  NonemptyListOf<DeclId, ",">
  VarExp      =  VarExp "[" Exp "]"                                -- subscripted1
              |  VarExp "."  id                                    -- subscripted2
              |  Call                                              -- subscripted3
              |  id
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  Type id (":" Exp)?
  Params      =  ListOf<Param, ",">
  Arg         =  Exp
  Args        =  ListOf<Arg, ",">
  Type        =  ( NumType | LongType| StringType | BooleanType | ArrayType | SetType | DictType )
  NumType     =  "digitz"
  LongType    =  "longz"
  StringType  =  "wordz"
  BooleanType =  "boolz"
  ArrayType   =  "arrayz"
  SetType     =  "setz"
  DictType    =  "dictz"
  TupleType   =  "tuplez"
  ConstType   =  "stayz"
  keyword     =  ("ATTENTIONATTENTION üó£" | "!!!" | "wylinü§™" | "yeet" | "iHaveSomethingToSayüôÖüèæ‚Äç‚ôÄÔ∏è"
              | "&&" | "becauseWhyyyüòº" | "BECAUSEIMONFUCKINGVACATIONüëÖ" | "shutUpGirlfriendüòà"
              | "openHerUp" | "üî•"  | "openHerUpüçë" | "sheWaitsüò©" | "andWhatAboutIt" | "||" | "suplilBitch" 
              | "andLetMeDoMeü§ë" | "newBootzBeeeatch‚ú®" | "hotlineBlingüíé" | "digitz" | "longz" | "wordz" | "boolz" |"trueShit" | "stayz" 
              | "arrayz" | "setz" | "dictz" | "tuplez" | "deceasedOnYouHoes" | "fraudulentAssBitch" | "seeYa" | "wouldntWannBeYa" | "!!!" 
              | "weOutHereTryinToFunction" | "?" | "andThemsTheFacts" | "GTFOüí©"| "ANDINTHATORDERüëèüèæ") ~idrest
  id          =  ~keyword ("_" | letter*) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("+" | "-")? digit+)? 
  boollit     =  "trueShit" | "fraudulentAssBitch"
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  nonelit     = "deceasedOnYouHoes"
  escape      =  "\\" ("\\" | "\"" | "n")                          -- simple
  incremop 	  =  "++" | "--"
  spread      =  "spreadThatThangüçØ"                          
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!="| ">=" | ">"
  mulop       =  "*" | "//" | "/" | "%"
  prefixop    =  "-" | "BANGENERGY"
  postfixop   =  "?"
  space      +=  comment
  comment     =  "oop" (~"\n" any)* "\n"                          -- singleline
              |  ":/" (~"/:" any)* "/:"                           -- multiline
}